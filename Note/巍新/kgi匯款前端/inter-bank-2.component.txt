import {Component, OnInit} from '@angular/core';
import {FormBuilder, FormControl} from '@angular/forms';
import {ActivatedRoute, Router} from '@angular/router';
import {BaseComponent} from '../@core/shared/base/base.component';
import {RouteUiService} from '../@core/shared/service/route-ui.service';
import {GlobalDataService} from '../@core/shared/service/global.service';
import {COMPONENT_AIO} from '../@core/shared/routing/aio.path';
import {AccountService} from '../@core/shared/service/account.service';
import {DIALOG_TYPE, SlideDialogService} from '../@core/shared/service/slide-dialog.service';
import {ResizeService} from '../@core/shared/service/resize.service';
import {SpinnerService} from '../@core/shared/service/spinner.service';
import {GenericService} from '../@core/shared/service/generic.service';
import {ComponentType} from '@angular/cdk/overlay';
import {VerificationDialogComponent} from '../@core/shared/base/dialog/verification/verification-dialog.component';
import {CustomDialogService} from 'src/app/@core/shared/service/custom-dialog.service';
import {InterBankModel} from '../@core/shared/model/inter-bank.model';
import {DEBIT_TYPE} from '../@core/shared/app.constants';

@Component({
    selector: 'app-inter-bank-2',
    templateUrl: './inter-bank-2.component.html',
    styleUrls: ['./inter-bank-2.component.scss']
})
export class InterBank2Component extends BaseComponent<InterBankModel> implements OnInit {

    baseModel: InterBankModel = new InterBankModel();

    DEBIT_TYPE = DEBIT_TYPE;

    debitType: number = DEBIT_TYPE.ACCOUNT;

    isAgent = false;

    constructor(protected routingService: RouteUiService,
                protected dialogService: SlideDialogService,
                protected spinnerService: SpinnerService,
                protected resizeService: ResizeService,
                protected fb: FormBuilder,
                protected router: Router,
                protected activatedRoute: ActivatedRoute,
                protected gd: GlobalDataService,
                protected accountService: AccountService,
                protected genericService: GenericService,
                private customDialogService: CustomDialogService) {

        super(activatedRoute, routingService, dialogService, spinnerService, resizeService, router, fb, gd);

        console.log('InterBank2Component interBankList: ', this.gd.interBankList);

        if(this.gd.interBankList) {
            // Object.assign(this.baseModel, this.gd.interBankList); //右邊clone到左邊, 但不刪除 model validators method
            this.add(this.gd.interBankList);
        }else{
            this.add();
        }

        //init form group (baseModel should not be null)
        this.appendFormValidator(true);

    }

    ngOnInit() {
        super.ngOnInit();
    }

    // initData(): Observable<Object> {
    //     return new Observable((observer) => {
    //         observer.next(true); //true才會append FormGroup Validator
    //     });
    // }

    resetFormControl(): void {
        // this.disableFormControl(this.getFieldName(this.baseModel).money);
        this.disableFormControl(this.getFieldName(this.baseModel).memo);

        //收款帳號
        this.disableFormControl(this.getFieldName(this.baseModel).payeeAccount);

        //收款戶名
        this.disableFormControl(this.getFieldName(this.baseModel).payeeName);

        //匯款人資訊
        // this.disableFormControl(this.getFieldName(this.baseModel).remitterName);
        // this.disableFormControl(this.getFieldName(this.baseModel).remitterIdno);
        // this.disableFormControl(this.getFieldName(this.baseModel).remitterPhone);

        //代理人資訊
        this.disableFormControl(this.getFieldName(this.baseModel).agentName);
        this.disableFormControl(this.getFieldName(this.baseModel).agentIdno);
        this.disableFormControl(this.getFieldName(this.baseModel).agentPhone);
    }

    clearAndUpdateRelated(value: any) {
        this.debitType = value;
        // this.clear();
        console.log('clear origin data...');
        console.log('debitType: ', this.debitType);

        //更新匯款方式
        this.updateFormControlValue(this.getFieldName(this.baseModel).debitType, this.debitType);

        if(this.debitType === DEBIT_TYPE.ACCOUNT){
            this.enableFormControl(this.getFieldName(this.baseModel).remitterAccount);
        }else{
            //選擇現金扣款不需填扣款帳號
            this.disableFormControl(this.getFieldName(this.baseModel).remitterAccount);
        }
    }

    validateBeforeRoute(baseModel: any, disableFormGroup: boolean | undefined): boolean {
        return true;
    }

    goBack(){
        this.router.navigate([COMPONENT_AIO.INTER_BANK_SETTING]);
    }

    updateAgentInfo(event: any){
        const value = event.target.checked;

        if(value) {
            this.isAgent = true;
            this.enableFormControl(this.getFieldName(this.baseModel).agentName);
            this.enableFormControl(this.getFieldName(this.baseModel).agentIdno);
            this.enableFormControl(this.getFieldName(this.baseModel).agentPhone);
        }else{
            this.isAgent = false;
            this.disableFormControl(this.getFieldName(this.baseModel).agentName);
            this.disableFormControl(this.getFieldName(this.baseModel).agentIdno);
            this.disableFormControl(this.getFieldName(this.baseModel).agentPhone);
        }
        console.log('updateAgentInfo: ', value);
    }

    public showVerificationDialog<T>(data: any, component?: ComponentType<T>) {
        let contentComponent: any = VerificationDialogComponent;
        if (component) {
            contentComponent = component;
        }

        const dialog = this.myDialogService.open(contentComponent, {
            width: '573px',
            height: '200px',
            leftTitle: false,
            centerTitle: true,
            title: '以下欄位尚未通過驗證：',
            data: data,
            style: this.dialogType
        });

        //從 dialog 取回資料
        dialog.afterClosed().subscribe((result) => {
            console.log('Result data: ', result);
        });
    }

    //存摺扣款
    isByAccount() : boolean {
        return (this.getFormControlValue(this.getFieldName(this.baseModel).debitType) === DEBIT_TYPE.ACCOUNT);
    }

    goNext(): void {
        if (this.myFormGroup.invalid) {
            this.showVerificationDialog(this.findInvalidControls());
            return;
        }

        //save to session storage
        this.gd.interBankList = this.myFormGroup.getRawValue();
        console.log('save interBankList: ',this.gd.interBankList);

        this.router.navigate([COMPONENT_AIO.INTER_BANK_CONFIRM]);
    }

    clear(){
        this.myFormGroup.reset();
        this.baseModel = new InterBankModel();
        this.add();
    }

    add(data ?: InterBankModel){
        console.log('before add: ', this.myFormGroup.getRawValue())

        let interBankModel = new InterBankModel(); //預設有一筆
        interBankModel.payeeAccount = '';
        interBankModel.remitterAccount = '';
        interBankModel.money = undefined;
        interBankModel.memo = 'gg';
        interBankModel.debitType = DEBIT_TYPE.ACCOUNT;

        if(data){
            Object.assign(interBankModel, data); //右邊clone到左邊, 但不刪除 model validators method
        }

        this.baseModel =  interBankModel;

        console.log('add: ', this.baseModel);
        this.myFormGroup.patchValue(this.baseModel);
    }

    test(){
        if (this.myFormGroup.invalid) {
            this.showVerificationDialog(this.findInvalidControls());
        }
        console.log(this.myFormGroup.getRawValue())
    }

}